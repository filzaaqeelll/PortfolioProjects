USE DataWarehouseAnalytics

--Explore  All Objects in the Database
Select * FROM INFORMATION_SCHEMA.TABLES

--Explore All Columns in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME ='dim_customers'

--Explore All countries our customers come from
SELECT DISTINCT country FROM gold.dim_customers

-- Explore All categories of "The Major Divisions"
SELECT DISTINCT category, subcategory, product_name from gold.dim_products 
Order by 1,2,3

 
 -- Find the date of the first and last order
 SELECT min (order_date) as first_order_date,
 max (order_date) as first_order_date,
 DATEDIFF(year,min (order_date), max (order_date)) as order_range_years
 FROM gold.fact_sales


 -- Find the youngest and the oldest  customer
 SELECT
 MIN(birthdate) AS oldest_birthdate,
 DATEDIFF (year, MIN(birthdate), GETDATE()) AS oldest_age,
 MAX(birthdate) AS youngest_birthdate,
 DATEDIFF (year, Max(birthdate), GETDATE()) AS youngest_age
 FROM gold.dim_customers


 --Find the Total Sales
 Select SUM(sales_amount)AS total_sales FROM gold.fact_sales

 --Find how many items are sold
 Select SUM(quantity)AS total_quantity FROM gold.fact_sales

 --Find the average selling price
 Select AVG(price)AS avg_price FROM gold.fact_sales

 --Find the total number of orders
 Select count(order_number)AS total_order FROM gold.fact_sales
 Select count(Distinct(order_number))AS total_order FROM gold.fact_sales

 --Find the total number of products
 SELECT COUNT(product_name) As total_products FROM gold.dim_products
 SELECT COUNT(Distinct(product_name)) As total_products FROM gold.dim_products

 --Find the total number of customers
  SELECT COUNT(Distinct(customer_key)) As total_products FROM gold.dim_customers

 --Find the total number of customers that has placed an order
 SELECT COUNT(Distinct(customer_key)) As total_products FROM gold.fact_sales

 -- Generate a Report that shows all key metrics of the business
Select 'Total Sales' as measure_name, SUM(sales_amount)AS measure_value FROM gold.fact_sales
UNION ALL
Select 'Total Quantity' as measure_name, SUM(quantity)AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Orders',count(DISTINCT(order_number)) FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Products', COUNT(product_name) FROM gold.dim_products
UNION ALL
SELECT 'Total Nr. Customers', COUNT (customer_key) FROM gold.dim_customers

--Find total customers by countries
SELECT Country, Count (customer_key) as total_customers
From gold.dim_customers
Group BY country
ORDER BY total_customers desc

--Find total customers by gender
SELECT gender, Count (customer_key) as total_customers
From gold.dim_customers
Group BY gender
ORDER BY total_customers desc

--Find total products by category
SELECT category, Count (product_key) as total_products
From gold.dim_products
Group BY category
ORDER BY total_products desc


--What is the average costs in each category?

SELECT category, avg (cost) as avg_cost
From gold.dim_products
Group BY category
ORDER BY avg_cost desc


--what is the total revenue generated for each category?

SELECT p.category, sum(f.sales_amount) as total_revenue
From gold.fact_sales as f
Left JOIN gold.dim_products as p
on p.product_key= f.product_key
Group BY p.category
ORDER BY total_revenue desc



--Find total revenue is generated by each customer?

SELECT c.customer_key,c.first_name, c.last_name, sum(f.sales_amount) as total_revenue
From gold.fact_sales as f
Left JOIN gold.dim_customers as c
on c.customer_key= f.customer_key
Group BY c.customer_key,c.first_name, c.last_name
ORDER BY total_revenue desc



--What is the distribution of sold items across countries? 
SELECT c.country, sum(f.quantity) as total_sold_items
From gold.fact_sales as f
Left JOIN gold.dim_customers as c
on c.customer_key= f.customer_key
Group BY c.country
ORDER BY total_sold_items desc


--Which 5 products generate highest revenue?
SELECT TOP 5
p.product_name, sum(f.sales_amount) as total_revenue
From gold.fact_sales as f
Left JOIN gold.dim_products as p
on p.product_key= f.product_key
Group BY p.product_name
ORDER BY total_revenue desc


SELECT *
FROM(
	SELECT 
	p.product_name, sum(f.sales_amount) as total_revenue,
	ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount)DESC) AS rank_products
	From gold.fact_sales as f
	Left JOIN gold.dim_products as p
	on p.product_key= f.product_key
	Group BY p.product_name)t
WHERE rank_products<=5



--what are the 5 worst-performing products in terms of sales?
SELECT TOP 5
p.product_name, sum(f.sales_amount) as total_revenue
From gold.fact_sales as f
Left JOIN gold.dim_products as p
on p.product_key= f.product_key
Group BY p.product_name
ORDER BY total_revenue 


SELECT TOP 5
p.subcategory, sum(f.sales_amount) as total_revenue
From gold.fact_sales as f
Left JOIN gold.dim_products as p
on p.product_key= f.product_key
Group BY p.subcategory
ORDER BY total_revenue 

--Change over time

SELECT YEAR(order_date)as order_year,MONTH(order_date)as order_month, sum(sales_amount) as total_sales, 
count(distinct customer_key) as total_customers, sum(quantity) as total_quantity
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY YEAR(order_date),MONTH(order_date)
ORDER BY YEAR(order_date),MONTH(order_date)


--Calculate the total sales per month 
--and the running total sales over time


SELECT order_date,total_sales, sum(total_sales) OVER (PARTITION BY YEAR (order_date) ORDER BY order_date) AS running_total_sales,
sum(avg_price) OVER (PARTITION BY YEAR (order_date) ORDER BY order_date) AS running_avg_sales

FROM(
SELECT DATETRUNC(month,order_date) as order_date, sum(sales_amount)  as total_sales, AVG(price) as avg_price
FROM gold.fact_sales
WHERE order_date IS NOT NULL
GROUP BY DATETRUNC(month,order_date)
)t 


--Analyze the yearly performance of products by comparing each product's
--sales to both its average sales performance and the previous year's sales
WITH yearly_product_sales AS( 
SELECT
year(f.order_date) as order_year, p.product_name, sum(f.sales_amount) as current_Sales
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key= p.product_key
WHERE f.order_date is not null
GROUP BY year(f.order_date),p.product_name)

SELECT order_year, product_name, current_Sales,
avg(current_Sales) OVER (PARTITION BY product_name)as avg_current_Sales,
current_Sales- AVG(current_Sales) OVER (PARTITION BY product_name)as diff_avg,

CASE WHEN current_Sales- AVG(current_Sales) OVER (PARTITION BY product_name)>0 THEN 'Above average'
	 WHEN current_Sales- AVG(current_Sales) OVER (PARTITION BY product_name)<0 THEN 'Below average'
	 ELSE 'Avg'
END avg_change,
--year over year analysis--
LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year)py_sales,
current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year)as diff_py,
CASE WHEN current_Sales- LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year)>0 THEN 'Profit'
	 WHEN current_Sales- LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year)<0 THEN 'Loss'
	 ELSE 'no change'
END py_change
FROM yearly_product_sales
ORDER BY product_name, order_year



--which categories contribute the most to overall sales


WITH category_sales as (
SELECT
 p.category, sum(f.sales_amount) as total_Sales
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key= p.product_key
GROUP BY p.category)

SELECT category,total_Sales,
SUM(total_Sales) over() overall_sales,
concat(Round((CAST(total_Sales AS FLOAT)/SUM(total_Sales) over())*100,2),'%') AS percentage_of_total

FROM category_sales
ORDER BY total_Sales desc



--Segment products into cost ranges and 
--count how many products fall in each segment

WITH product_segments as(

SELECT
product_key, product_name, cost,
CASE WHEN cost< 100 then 'Below 100'
	 WHEN cost between 100 AND 500 then '100-500'
	 WHEN cost between 500 AND 1000 then '500-1000'
	 ELSE 'Above 1000'
END as cost_range	
FROM gold.dim_products)

SELECT cost_range, count(product_key) as total_products
from product_segments
GROUP BY cost_range
ORDER BY total_products desc

--Group customers into three segments:
  -- VIP: customers with at least 12 months of history and spending more than 5000
  -- Regular: customers with at least 12 months of history but spending 5000 or less.
  -- New: Customers with a lifespan less than 12 months.
  --And find the total number of customers by each group


WITH customer_spending AS(
 SELECT
c.customer_key,SUM(f.sales_amount) as total_spending, 
MIN(order_date) as first_order,
MAX(order_date) as last_order_date,
DATEDIFF(month,MIN(order_date), MAX(order_date)) as month_history
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key=c.customer_key
GROUP BY c.customer_key)

Select customer_type, Count(customer_key) as total_customers
from(
	SELECT customer_key,
	CASE WHEN total_spending>5000 and month_history>=12 then 'VIP'
		 WHEN total_spending<=5000 and month_history>=12 then 'Regular'
		 ELSE 'NEW'
	END AS customer_type
	FROM customer_spending)t
GROUP BY  customer_type
order by  total_customers desc




/*
================================================================================
Customer Report
================================================================================
Purpose:
- This report consolidates key customer metrics and behaviors

Highlights:
1. Gathers essential fields such as names, ages, and transaction details.
2. Segments customers into categories (VIP, Regular, New) and age groups.
3. Aggregates customer-level metrics:
   - total orders
   - total sales
   - total quantity purchased
   - total products
   - lifespan (in months)
4. Calculates valuable KPIs:
   - recency (months since last order)
   - average order value
   - average monthly spend
BASE QUERY: retrieves core columns from tables*/


CREATE VIEW gold.report_customer AS
WITH base_query as(
select f.order_number, f.product_key, f.order_date,f.sales_amount, f.quantity,
c.customer_key, c.birthdate, c.customer_number,
concat(c.first_name,' ',c.last_name) AS customer_name,
DATEDIFF(year, c.birthdate, getdate())age
from gold.fact_sales f
left join gold.dim_customers c
on c.customer_key= f.customer_key
WHERE order_date is not null)

, customer_aggregation AS(

SELECT 
customer_key,customer_number,customer_name,age, count(distinct order_number) as total_orders,
sum(sales_amount) as total_sales,
sum(quantity) as total_quantity,
count(distinct product_key) as total_product,
MIN(order_date) as first_order,
MAX(order_date) as last_order_date,
DATEDIFF(month,MIN(order_date), MAX(order_date)) as month_history
from base_query
GROUP BY
customer_key,customer_name,customer_number,age
)

SELECT customer_key,customer_number,customer_name,age,
CASE WHEN age<20 then 'under 20' 
     WHEN age between 20 and 29 then '20-29' 
	 WHEN age between 30 and 39 then '30-39' 
	 WHEN age between 40 and 49 then '40-49' 
	 else '50 and above'
END AS age_group,
CASE WHEN total_sales>5000 and month_history>=12 then 'VIP'
		 WHEN total_sales<=5000 and month_history>=12 then 'Regular'
		 ELSE 'NEW'
	END AS customer_type,
last_order_date, datediff(MONTH,last_order_date,getdate()) as recency,
total_sales,total_quantity, total_product,first_order,month_history,total_orders,
--compute average order value
CASE WHEN total_orders= 0 then 0
	 else total_sales/total_orders
 end as avg_order_value,

 --compute average monthly spend
 CASE WHEN month_history= 0 then total_sales
	  else total_sales/month_history
 end as avg_monthly_spend

FROM
customer_aggregation
 


 SELECT * from gold.report_customer




   
   
